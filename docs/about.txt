ABOUT THE PROJECT:
	- There's a word tag which has letter tags that contains single alpanumeric
		symbol, the last letter tag in a word tag contains a non-breaking space.

	- Each letter is given border left, at any given time only one of the letter
		tags will have a differenct color and rest of them will have same color and
		this color will be same as words container's background color. This is how
		cursor is emulated in this project.
				=> words container's color EQUAL letters border left color
	- 


FEATURES TO BE IMPLEMENTED:
	1. 	Option to select between different cursors. ‚ùå
	2. 	Option to to select the thickness of line cursor. ‚ùå
	3. 	Divide caret into block, line, underline as individual css property. ‚ùå
	4. 	Auto random word generation ‚ùå
	5. 	Option to restart test without reloading page ‚ùå
	6. 	Highlight mode
			Change what is highlighted during the test --> letter‚ùå | wordüìå
				- letter: (keybr + monkeytype)
					= note: first add fade class then move cursor to next letter
					= forgive errors me bus tum letter ko red kr k caret ko aage badha do
					  agar forgive error off hai to error letter ko insert karo, aur bina
						us errored letter ko user backspace daba de clear nhi krta tabtak
						caret ko aage mat badhana, user space dabai tab v nhi. jab sab error
						clear krke user aage badhe toh jis letter k liye galat letter type
						ki gai thi us letter ko red kr den aur caret ko aage badha dena.

				- word: (monkeytype)
					 	a. if letter correctly typed then move caret forward by one letter.
						b. if wrong letter typed then insert it with darkred color in-between
							 or after the current word it its typed after the last non-whitespace
							 character (letters.length - 1)
						
				- in both scenarios we will insert error letters whenever it is typed

	7. 	If a user hits alt, opt, ctrl, meta or shift key then we should not count
		 	it as error and avoiding giving an error highlight to the word/letter.

	8. 	Error collection
					Array of word = [w1, w2, ... ,wN]
					Array of stack = [stack1, stack2, ... ,stackN]

					stack: ‚úÖ
							- empty: determine if stack is empty or not
							-  push: an error letter
							-   pop: delete the top error letter and return it
							-   top: view the top error letter
					
					give an id to each error letter of the word, then push it on the stack
					for that particular word.
					when the user hits backspace, pop an element from the stack find that
					letter in the word using its id and delete it. the cursor should not
					move.

		9. 	while pressing ctrl/alt/opt + backspace the caret should be put after 
				these ({[]}),.;:'"`~!@#$%^&*/?<> symbols 

				for example use ctrl+bs or opt+bs on this string which contains 
				all these symbols.
				~adf`adf!adf@ad#adf$adf%adfd^dfd&adfds*dfa(dfadsf)dfsd-dsf_dfdf=sdfasf+dfa{dfsf[dfsdf}dsfsaf]sfsdf\dfds|dfsad‚Äôf‚Äùsdfds;sdffd:dfasdf/sdf?df.sdf>fdsf,sdf<adf


	Windows
			ctrl + backspace	(clear one word)  ‚úÖ
			alt  + backspace	(clear all words) ‚úÖ

	Mac
			opt + backspace 	(clear one word) ‚úÖ
			cmd + backspace		(clear all words)‚úÖ


WEIRD BEHAVIOURS:
	- Sometimes when you type, the caret doesn't move?
		It happens because you click somewhere or for any other action the focus is
		removed input tag.
	

Note:
		&nbsp; and &#160; is non-breaking space
		&#32; is ascii space character (ascii value: 32)

		letters[active_letter].textContent for the letter which contains &nbsp; 
		returnsa string of length 1, 160 is return if we get the value of &nbsp; 
		using charCodeAt() method

		therefore we need to map 160 to 32 i.e, &nbsp; to space character.

Speed:
		1 word = 5 characters
		93 / 5 = 18.6 => 19 words of length 5
		14s = 19 words
		1s = 19/14 words
		60s = 19/14 * 60 => 81wpm
