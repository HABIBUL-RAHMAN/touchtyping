ABOUT THE PROJECT:
	- There's a word tag which has letter tags that contains single alpanumeric
		symbol, the last letter tag in a word tag contains a non-breaking space.

	- Each letter is given border left, at any given time only one of the letter
		tags will have a differenct color and rest of them will have same color and
		this color will be same as words container's background color. This is how
		cursor is emulated in this project.
				=> words container's color EQUAL letters border left color





--------------------------------------------------------------------------------
FEATURES TO BE IMPLEMENTED:
	1. 	Option to select between different cursors. ‚ùå
	2. 	Option to to select the thickness of line cursor. ‚ùå
	3. 	Divide caret into block, line, underline as individual css property. ‚ùå
	4. 	Auto random word generation ‚ùå
	5. 	Option to restart test without reloading page ‚ùå
	6. 	Highlight mode
			Change what is highlighted during the test --> letter‚ùå | wordüìå
				- letter: (keybr + monkeytype)
					= note: first add fade class then move cursor to next letter
					= forgive errors me bus tum letter ko red kr k caret ko aage badha do
					  agar forgive error off hai to error letter ko insert karo, aur bina
						us errored letter ko user backspace daba de clear nhi krta tabtak
						caret ko aage mat badhana, user space dabai tab v nhi. jab sab error
						clear krke user aage badhe toh jis letter k liye galat letter type
						ki gai thi us letter ko red kr den aur caret ko aage badha dena.

				- word: (monkeytype)
					 	a. if letter correctly typed then move caret forward by one letter.
						b. if wrong letter typed then insert it with darkred color in-between
							 or after the current word it its typed after the last non-whitespace
							 character (letters.length - 1)
						
				- in both scenarios we will insert error letters whenever it is typed

	7. 	If a user hits alt, opt, ctrl, meta or shift key then we should not count
		 	it as error and avoiding giving an error highlight to the word/letter.

	8. 	Error collection
					Array of word = [w1, w2, ... ,wN]
					Array of stack = [stack1, stack2, ... ,stackN]

					stack: ‚úÖ
							- empty: determine if stack is empty or not
							-  push: an error letter
							-   pop: delete the top error letter and return it
							-   top: view the top error letter
					
					give an id to each error letter of the word, then push it on the stack
					for that particular word.
					when the user hits backspace, pop an element from the stack find that
					letter in the word using its id and delete it. the cursor should not
					move.

		9. 	while pressing ctrl/alt/opt + backspace the caret should be put after 
				these ({[]}),.;:'"`~!@#$%^&*/?<> symbols 

				for example use ctrl+bs or opt+bs on this string which contains 
				all these symbols.
				~adf`adf!adf@ad#adf$adf%adfd^dfd&adfds*dfa(dfadsf)dfsd-dsf_dfdf=sdfasf+dfa{dfsf[dfsdf}dsfsaf]sfsdf\dfds|dfsad‚Äôf‚Äùsdfds;sdffd:dfasdf/sdf?df.sdf>fdsf,sdf<adf





--------------------------------------------------------------------------------
Windows
		ctrl + backspace	(clear one word)  ‚úÖ
		alt  + backspace	(clear all words) ‚úÖ

Mac
		opt + backspace 	(clear one word) ‚úÖ
		cmd + backspace		(clear all words)‚úÖ




--------------------------------------------------------------------------------
Quick Ideas:
		Avoiding caret blinking for letters other than first letter.
				- just add animation properties to first letter.
				- as soon as a key is pressed remove the animation property.

		Implementation ‚ùå (dumped this solution & used the alternate solution)
				- Firstly don't have 'caret' class on first letter of first word then 'blink' 
					class do the job of adding it.
				- remove the 'blink' class as soon as the user types his/her first letter.
				- when user hits (cmd + backspace) then add the 'blink' class again.
				- when user goes to first letter of first word by hitting (ctrl + backspace)
					or (opt/alt + backspace) then add 'blink' class again.
				- when user uses his/her backspace key to go all the way to first letter 
					of first word then add a 'blink' caret again.
				
				Issue
						- the blinking caret vanishes away when we hit an incorrect letter
							also so debug it later.
				
				Alternate Solution ‚úÖ
						- You can set animation-delay property.
						- This way you will emulate the same behaviour as VSCode's caret.




--------------------------------------------------------------------------------
WEIRD BEHAVIOURS:
	- Sometimes when you type, the caret doesn't move?
		It happens because you click somewhere or for any other action the focus is
		removed input tag.
	

Note:
		&nbsp; and &#160; is non-breaking space
		&#32; is ascii space character (ascii value: 32)

		letters[active_letter].textContent for the letter which contains &nbsp; 
		returnsa string of length 1, 160 is return if we get the value of &nbsp; 
		using charCodeAt() method

		therefore we need to map 160 to 32 i.e, &nbsp; to space character.

Speed:
		1 word = 5 characters
		93 / 5 = 18.6 => 19 words of length 5
		14s = 19 words
		1s = 19/14 words
		60s = 19/14 * 60 => 81wpm




--------------------------------------------------------------------------------
WHAT I WANT:
		> Use only:
				- keydown, keyup
				- keyboardevent.code, keyboardevent.key

		> &nbsp; | &#160; is a non-break whitespace and not a space character which
			has ascii value 32. nbsp is a string of length 1, whose char code is 160,
			which you can get using "".charCodeAt(0)
			
		> caret moves forward one letter at a time as the user types

		> backspace should work like normal texteditor, it should clear letters
			all the way to first letter of first word if the user keeps on hitting backspace.
			
		> alt  + backspace
			opt  + backspace
			ctrl + backspace
				- All these key combinations should work the same way as it works in 
					a texteditor i.e, clear an entire word and put the caret at the 
					first letter of the current word. If caret is at first letter of a word
					then you should clear the previous word and put the creat on first
					letter of previous word.

				- Also have special behaviour for these special symbols when using these
					key combinations i.e, caret should stop before these symbols.
					~`!@#$%^&*()-=_+{[]}|\;:"',<.>/?
					
		> hightlight modes
				- letter:
						implement every feature of letter hightlight mode of "keybr"
				- word:
						implement every feature of word hightlight mode of "monkeytype"
				- in both modes if forget error is turned on then insert letters.

		> ‚úÖ caret style (none, line, underline, box, block)
				- BLINKING LINE CARET
							apply border left to all individual letters and give all of them transparent
							color except one and all the other three borders (right, top, bottom) 
							should be set to none.

				- BLINKING UNDERLINE CARET
							apply border bottom to all individual letters and give all of them
							transparent color except one and all the other borders (left, right, top) 
							should be set to none. 
					
				- BLINKING BOX CARET
							apply border left, right, top and bottom to all individual letters and give
							all of them transparent color except one. 

				- NON-BLINKING BLOCK CARET
							apply defferent text color and background color to a letter on which the
							caret is present, rest of the letters should be untouched.

		> words length choice
				- users will get which type & length of words they want to practice
					(study english grammer for type of words)

		> ‚úÖ default caret:
				- default color is black
				- default thickness will be thin of type line caret
			
		
		> ‚úÖ test end:
				- test ends as soon as the user types the last letter of last word.

		> deletion of wrongly typed letters:
				- while backspacing
					deletes on letter at a time so NO concept of stopping at special
					symbols like ~`!@#$%^&*()-=_+{[]}|\;:"',<.>/?
				- while cmd+backspace
					deletes all a wrongly/correctly typed letters at once putting the
					caret on first letter of first word. NO concept of stopping on
					special characters
				- while ctrl+backspace or alt+backspace
					deletes on word at a time, need to take a special care of special
					character like ~`!@#$%^&*()-=_+{[]}|\;:"',<.>/?

					Note: 
					Please test these two combinations on windows & mac extensively
					to understand their behaviour in a text editor

					Test this string by moving along with arrow keys & also deleting them
					with ctrl+bs & alt+bs key combinations.
					a~b`c!d@e#f$g%h^i&j*k(l)m-n=o_p+q{r[s]t}u|v\w;x:y"z'a,b<c.d>e/f?g

		> hide letter/word
				- if hightlight mode is letter then once the user types the letter correctly
					make it invisible by adding "display: none". do the same thing for word tag
					if hightlight mode is word.
				





--------------------------------------------------------------------------------
RANDOM THOUGHTS:
		> No matter what, the user has turned on forgive errors or not we will count
		  each and every character typed by the user. If the user has forgive errors 
			off, then we will insert it otherwise not.

ISSUES:

		> Special keys:
				- when user hits (alt/opt, ctrl, meta, shift) any of these keys, it should
					not be regarded as error. ‚úÖ
				- while inserting wronly typed letters, don't insert these special keys.




--------------------------------------------------------------------------------
üåü GameLogic

> clicking on restart will start a new test

> inserterror is turned 'on'
> inserterror is turned 'off'


> forgiveerror is turned 'on'
		- insert wrongly type letters, whenever user types a letter correctly then
			move the caret forward.
		- if user hits a space after typing first letter (not before that) then
			take caret to next word marking the previous word red colored.
		- hitting space before typing first letter will insert the space character "‚∏±"
			and after that whenever user hits space then go to next word.

> forgiveerror is turned 'off'
		- only way to move the caret is to correct all mistakes and type letters
		  correctly, care will move to next word only when all inserted letters
			are deleted.
		- if forgiveerror is turned of then by default inserterror will be turned on
		- as soon as the user starts typing incorrect letter it will get inserted
			user needs to clear the incorrectly typed letters inorder to move the caret
			forward.


> deletion is turned 'on'
> deletion is turned 'off'


Goal:
	- Implement Sentence object
	- Implement hightlight mode (letter, word)

Note: no error insertion and forgiveerror & deletion is turned on.

let test = new Test();

Inside test object
		> if test is completed by the user then we will create a new test object, 
			if test is stopped abruptly then we will discared the stats and use the 
			same object to start a new test by creating a new sentence object.
		
		> you need a button to start new test

		> creating sentence object will load random words, so test object will just
		  create a new sentence. (word generation will be customised using config
			object).

		> test object will put letter/word hightlight according to config object and
		  put caret on first letter of first word.
			
		> if user wants to change any setting of the game then current test will be
		  discareded, no new test object will be created just we will load new
			random words by creating new sentence object.

		> if test is complete then we will store the stats and create a new test
		  object.

		> game logic will be a method in test object.

				if ( letter typed is a space ) {
					
					1. if forgive errors is 'on' then move to next word regardless of whether
						typed letter key is wrong or correct.
						
					2. if forgive errors is 'off' then check whether the active letter is space
						and typed key is also a space, only then move to next word otherwise
						insert the wrongly typed space in the word.

				} else if ( keytyped is correct ) {

					- remove caret from current letter
					- increment letter index
					- put caret on next letter

					if ( test.isOver() ) {
						delegate these tasks to test object
							- end timer here
							- remove active letter/word hightlight & caret
							- display stats
							- remove eventlistener
							- start new test
					}

				} else if ( metakey + backspace ) {

						- remove caret from current letter/word
						- remove active status for current word (if hightlight mode is word)
						- remove incorrect class & extra errors for each word typed
						- reset active letter & word indexes
						- add caret to first letter of first word

				} else if ( ctrl/alt + backspace ) {

						- remove caret from current letter
						- remove incorrect class from current word (if caret is on 1st letter)
						- remove any extra errors inserted for the word
						- if caret is already at first letter of the word then
									- remove active status from current word (if hightlight mode is word)
									- decrease word index (go to previous word if not the first word)
									- add active status word (if hightlight mode is word)
									- add caret to first letter of the word
						- reset active letter index of the current word
						- remove incorrect class from current word (if caret is somewhere in middle of the word)
						- add caret to first letter of the word
						
				} else if ( backspace ) {
						
						- remove incorrect class from active word
						- if  active letter index > 0 then
								- take caret to previous letter of the current word as long as there 
									is a letter before it i.e, activeLetterIndex > 0
								- remove caret from active letter
								- decrement active letter index
								- add caret to previous letter
						- if active letter is at 0
								- caret is at first letter of the word then put caret on last 
									letter of previous word i.e, put caret on space character
								- remove caret from current letter
								- remove active status from active word (if hightlight mode is word)
								- decrement word index
								- set active letter index for this previous word to (word.length - 1)
								- put caret on the last letter of this previous word

				} else {
					
						- if typedkey is not an invisible character then add incorrect class
						  to the active word.
				}


--------------------------------------------------------------------------------
üåü keyinfo

KeyboardEvent
						DOM_KEY_LOCATION_STANDARD =  0
						DOM_KEY_LOCATION_LEFT 		=  1
						DOM_KEY_LOCATION_RIGHT 	 	=  2
						DOM_KEY_LOCATION_NUMPAD 	=  3
						key
						code
						repeat
						location -> (0, 1, 2, 3)
						altKey
						ctrlKey
						metaKey	
						shiftKey
						isComposing

			e.key
						(Control, Shift, Alt, Meta)
			e.code 
						(ControlLeft,	ControlRight)
						(AltLeft,	AltRight)
						(ShiftLeft,	ShiftRight)
						(MetaLeft, MetaRight)
location
 			0 is standard
			1 is left
			2 is right
			3 is numpad's keys (locked, unlocked)
			You can distinguish normal arrow keys vs numpad arrows and numpad digits
			vs number row digits using the location property. Numpad version's value
			will be 3 and standard ones will have value 0.

   ArrowUp	-  KeyW	 - 	Numpad8
 ArrowLeft	-  KeyA	 - 	Numpad4
ArrowRight	-  KeyD	 - 	Numpad6
 ArrowDown	-  KeyS	 - 	Numpad2

addEventListener
					keyup
					keydown
					focus
					click
					focusout
					mouseleave
					mouseenter
					compositionend
					compositionstart

whitespace
				> "&nbsp;".charCodeAt(0) = 160
				> "‚∏±".charCodeAt(0)	= 11825
					<span style="padding: 0px 4px;">‚∏±</span>




--------------------------------------------------------------------------------
üåü ERROR INSERTION

> start from here...



--------------------------------------------------------------------------------
üåü TEST CONFIGURATION OPTIONS

> caret ‚ú®
> flipcolor
> hightlight

> deletion
> inserterror
> instantdeath

> forgiveerror

  turned 'on'
  		- insert wrongly type letters, whenever user types a letter correctly then
  			move the caret forward.
  		- if user hits a space after typing first letter (not before that) then
  			take caret to next word marking the previous word red colored.
  		- hitting space before typing first letter will insert the space character "‚∏±"
  			and after that whenever user hits space then go to next word.
  
  turned 'off'
  		- only way to move the caret is to correct all mistakes and type letters
  		  correctly, care will move to next word only when all inserted letters
  			are deleted.
  		- if forgiveerror is turned of then by default inserterror will be turned on
  		- as soon as the user starts typing incorrect letter it will get inserted
  			user needs to clear the incorrectly typed letters inorder to move the caret
  			forward.